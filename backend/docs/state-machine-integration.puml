@startuml State Machine Integration
!theme plain
skinparam backgroundColor white

title State Machine Integration Across Contexts

package "State Management" {
    
    state "Facility Lifecycle" as facility_sm {
        state DRAFT : 編集可能状態
        state FIXED : 確定状態（変更不可）
        
        [*] --> DRAFT : 新規作成
        DRAFT --> FIXED : Drawdown実行時
        
        note on link
            ドローダウン実行により
            自動的に確定状態へ遷移
        end note
    }
    
    state "Loan Lifecycle" as loan_sm {
        state DRAFT : 引き出し直後
        state ACTIVE : 返済開始
        state OVERDUE : 延滞状態
        state COMPLETED : 完済
        
        [*] --> DRAFT : Drawdown実行
        DRAFT --> ACTIVE : 初回返済
        ACTIVE --> OVERDUE : 延滞発生
        ACTIVE --> COMPLETED : 完済
        OVERDUE --> ACTIVE : 延滞解消
        OVERDUE --> COMPLETED : 完済
        
        note on link
            元本・利息どちらの
            返済でも状態遷移
        end note
    }
    
    state "Party Status" as party_sm {
        state ACTIVE : アクティブ
        state RESTRICTED : 制限状態
        
        [*] --> ACTIVE : 新規登録
        ACTIVE --> RESTRICTED : Facility参加後
        
        note on link
            参加後は重要フィールド
            変更制限
        end note
    }
    
    state "Transaction Status" as tx_sm {
        state PENDING : 処理待ち
        state PROCESSING : 処理中
        state COMPLETED : 完了
        state CANCELLED : キャンセル
        
        [*] --> PENDING : 取引作成
        PENDING --> PROCESSING : 処理開始
        PROCESSING --> COMPLETED : 処理完了
        PROCESSING --> CANCELLED : 処理中断
        PENDING --> CANCELLED : 取引キャンセル
    }
}

package "Business Logic Integration" {
    
    component "FacilityService" as fac_svc {
        +createFacility() : DRAFT状態で作成
        +executeDrawdown() : DRAFT→FIXED遷移
        +canModify() : DRAFT時のみtrue
    }
    
    component "LoanService" as loan_svc {
        +executeDrawdown() : DRAFT状態で作成
        +processPayment() : DRAFT→ACTIVE遷移
        +checkOverdue() : 延滞チェック・状態更新
    }
    
    component "TransactionService" as tx_svc {
        +createTransaction() : PENDING状態
        +processTransaction() : 状態遷移管理
        +getTransactionHistory() : 状態別履歴
    }
    
    component "PartyService" as party_svc {
        +createInvestor() : ACTIVE状態
        +restrictAfterParticipation() : 自動制限
        +canModifyRestrictedFields() : 制限チェック
    }
}

' State Machine connections
facility_sm -- fac_svc
loan_sm -- loan_svc
party_sm -- party_svc
tx_sm -- tx_svc

note right of facility_sm
  **Facility状態管理:**
  
  • DRAFT: SharePie変更可能
  • FIXED: 一切の変更不可
  • ドローダウン時の自動遷移
end note

note right of loan_sm
  **Loan状態管理:**
  
  • 返済ライフサイクル追跡
  • 延滞状態の自動検出
  • 完済状態の判定
end note

note bottom of tx_sm
  **Transaction状態管理:**
  
  • 全取引の統一ライフサイクル
  • 処理状況の可視化
  • 失敗時の適切な状態管理
end note

note as integration_note
  **Spring State Machine統合:**
  
  • 各Contextのライフサイクル制御
  • イベント駆動による状態遷移
  • 業務ルールと状態の整合性
  • 統一的な状態管理基盤
end note

@enduml